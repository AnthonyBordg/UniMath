We start with instructions on how to generate Coq binaries which are needed to work with this version of Foundations library. The information on the history and content of the patch file is in the second part of the README file.

*****

To generate the binaries one needs to do the following:

1. To download the sources of Coq-8.4pl3 to the directory which we call dircoqpatched. This directory should in particular contain the Makefile which comes with the sources. The sources can be found here:

http://coq.inria.fr/distrib/8.4pl3/files/coq-8.4pl3.tar.gz

2. To copy the file coq-8.4-ufpatches.diff from this directory to dircoqpatched. Then to cd to dircoqpatched and run the command 

patch -p1 < /tmp/coq-8.4-ufpatches.diff

4. To run the commands (from the same directory):

./configure -coqide no -opt -with-doc no -local
make GOTO_STAGE=2 coqbinaries states

This will create a minimalistic installation of Coq sufficient for this library. To get other "standard library" files which come with Coq use "make" instead of "make GOTO ... ". If there is a problem see n.7 below.

The binary files are now in dircoqpatched/bin/ .

5. Add dircoqpatched/bin/ to the PATH variable of the shell where coq will be called from. This can be done either by running the command

export PATH=dircoqpatched/bin:$PATH

in the shell or by adding this command to the .profile file and (re-)starting the shell.

6. To test that things worked well one may type

coqc -v

which should generate something like this:

"The Coq Proof Assistant, version 8.4pl3 (April 2014)
compiled on Apr 24 2014 18:25:32 with OCaml 4.01.0"

with the date and time being the date when you ran make in dircoqpatched. 

7. The most likely source of problems with the compilation of Coq is that there is no OCaml package on you computer or that it is outdated. Under Mac OS X, we recommend using homebrew from http://brew.sh to install ocaml. Homebrew also gives some useful advice on what old installations can confuse the compilation processes.

*****

The patch file in this directory was created by Dan Grayson by combining together several earlier patch files written by Dan Grayson and Hugo Herblin. The following description is from the earlier version where these patch files where separate: 

Hugo's patches "inductive-indice-levels-matter-8.3.patch" and "patch.type-in-type" are intended only as a temporary solution for the universe management issues in Coq which arise in connection with the univalent approach. 

The first of these patches changes the way the universe level of inductive types is computed for those definitions which do not specify [ Set ] or [ Prop ] as the target of the inductive construction explicitely. The new computation rule for the universe level takes into account not only the u-levels of the types occuring in the constructors but also the u-levels of types occuring in "pseudo-parametrs" i.e. in the [ forall ] expressions in the type of the inductive definition. For example, in the definition:

[ Inductive Ind ( a1 : A1 ) : forall a2 : A2 , Type := ... ]

The u-level of [ Ind ] will be the maximum of the u-level computed on the basis of types occuring in the constructors and the u-level of [ A2 ]. The u-level of [ A1 ] which the type of a parameter [ a1 ] ( as opposed to a pseudo-parameter [ a2 ] ) is not taken into account. 

The second patch switches off the universe consistency checking in Coq which is a temporary measure which allows us to formalize interesting constructions such as [ ishinh ] and [ setquot ] without having the resizing rules. 

Dan's patches have the following functions (see also comments in the individual patches):

1. "grayson-closedir-after-opendir.patch" imporoves the management of file openings/closing and eliminates in most cases the complaint that there arev too many open files (this has now been included in the standard Coq).

2. "grayson-fix-infinite-loop.patch" this is a temporary fix for a bug in the current version of Coq's "call by need" normnalization algorithm. The patch uses a flag previously installed in the source code to switch off some optimization features of the algorthim. The need for this patch has arised because of several cases when Coq process would hang after "Admitted". In practice the patch prevents hangings but makes compilation of some of the code slower. In particular, with this patch installed the current standard library file Cycllic31.v does not compile in a reasonable amount of time (see the suggestion of how to compile Coq without much of the standard library below). It also affect the time of compilation for some of the "computation tests" in the Foundations library increasing the compilation time by a factor of >5. Hopefully, the actuall bug will be located and removed in the next update. (This has not been fixed as of Apr. 2014 but the bahvior can now be controlled by the -no-sharing flag).  

3. "grayson-improved-abstraction-version2-8.3pl2.patch" this patch dramatically improves the behavior of the [destruct] tactic making it applicable in many the cases when dependencies are present. It is not creating any complicated proof terms but simply uses the eliminator for inductive definitions in a more intelligent way than the standard [ destruct ] (this has now been included in the standard Coq).


4. "grayson-fix-infinite-loop.patch" fixes another hanging situation.   

*****